// Generated by CoffeeScript 1.6.2
(function() {
  var Tester, test;

  Tester = (function() {
    function Tester() {
      this.orientation = "portrait";
      this.iframe = $("#iframe");
      this.form = $("#form-url");
      this.inputUrl = $("#input-url");
      this.body = $("#controls .body");
      this.info = $("#tester-info");
      this.ctrlHeader = $("#controls .header span");
      this.url = "";
      this.width = 480;
      this.height = 800;
      this.visible = localStorage.resp_tester_show;
      this.initResArray = JSON.stringify(['320x480', '480x800', '640x960', '720x1280']);
      this.resArray = [];
      this.addResInputs = $("#add-res-inputs");
    }

    Tester.prototype.init = function() {
      if (localStorage.resp_tester_width !== void 0) {
        this.width = localStorage.resp_tester_width;
      } else {
        localStorage.setItem("resp_tester_width", this.width);
      }
      if (localStorage.resp_tester_height !== void 0) {
        this.height = localStorage.resp_tester_height;
      } else {
        localStorage.setItem("resp_tester_height", this.height);
      }
      if (localStorage.resp_tester_orient !== void 0) {
        this.orientation = localStorage.resp_tester_orient;
      } else {
        localStorage.setItem("resp_tester_orient", this.orientation);
      }
      if (localStorage.resp_tester_resarray !== void 0) {
        this.resArray = localStorage.resp_tester_resarray;
      } else {
        localStorage.setItem("resp_tester_resarray", this.initResArray);
        this.resArray = this.initResArray;
      }
      this.makeResButtons();
      this.changeCanvas();
      $("#" + this.orientation).attr("checked", "checked");
      if (this.visible === void 0 || this.visible === 'true') {
        this.body.show();
        localStorage.setItem('resp_tester_show', 'true');
        this.ctrlHeader.text("hide");
      } else {
        this.body.hide();
        this.ctrlHeader.text("show");
      }
      this.bindEvents();
      return this.readUri();
    };

    Tester.prototype.bindEvents = function() {
      var _this = this;

      this.form.on("submit", function(e) {
        e.preventDefault();
        return _this.changeURL(e);
      });
      $("#add-resolution").on("click", function() {
        $("#res_x").val("");
        $("#res_y").val("");
        return _this.addResInputs.show();
      });
      $("#reset-tester").on("click", function() {
        localStorage.clear();
        return window.location.href = window.location.href;
      });
      $("#add-res-inputs button").on("click", function() {
        var newR, rx, ry, _resArr;

        rx = parseInt($("#res_x").val(), 10);
        ry = parseInt($("#res_y").val(), 10);
        if (isNaN(rx) || isNaN(ry)) {
          alert("Insert number data");
          return false;
        }
        newR = rx + "x" + ry;
        _resArr = JSON.parse(_this.resArray);
        _resArr.push(newR);
        _this.resArray = JSON.stringify(_resArr);
        localStorage.setItem("resp_tester_resarray", _this.resArray);
        _this.addResInputs.hide();
        return _this.makeResButtons();
      });
      $("input[name=orientation]").on("change", function(e) {
        return _this.orientationChange(e);
      });
      return this.ctrlHeader.on("click", function() {
        if (_this.visible === "true") {
          localStorage.setItem("resp_tester_show", "false");
          _this.visible = "false";
          _this.body.slideUp();
          return _this.ctrlHeader.text("show");
        } else {
          localStorage.setItem("resp_tester_show", "true");
          _this.visible = "true";
          _this.body.slideDown();
          return _this.ctrlHeader.text("hide");
        }
      });
    };

    Tester.prototype.makeResButtons = function() {
      var buttonsArray, r, resPart, resPos, _i, _len, _resArr, _self,
        _this = this;

      _self = this;
      buttonsArray = [];
      _resArr = JSON.parse(this.resArray);
      for (_i = 0, _len = _resArr.length; _i < _len; _i++) {
        r = _resArr[_i];
        resPart = r.split('x');
        resPos = '<div class="res-row"><button class="res btn">' + resPart[0] + " x " + resPart[1] + '</button><i class="del icon-remove-sign"></i></div>';
        buttonsArray.push(resPos);
      }
      $("#resolutions").html(buttonsArray);
      $(".res").off("click");
      $(".res").on("click", function(e) {
        return _this.changeCanvas(e);
      });
      $("#resolutions .res-row .del").off("click");
      return $("#resolutions .res-row .del").on("click", function() {
        var _row;

        _row = $(this).parent();
        _self.removeResolution(_row.find('.res').text());
        return _row.remove();
      });
    };

    Tester.prototype.removeResolution = function(res) {
      var _resArray, _ress;

      res = res.replace(" ", "");
      res = res.replace(" ", "");
      _resArray = JSON.parse(this.resArray);
      _ress = _resArray.filter(function(x) {
        return x !== res;
      });
      localStorage.setItem("resp_tester_resarray", JSON.stringify(_ress));
      return this.resArray = JSON.stringify(_ress);
    };

    Tester.prototype.clearURL = function() {
      this.inputUrl.val("");
      return localStorage.removeItem('responsive_tester_url');
    };

    Tester.prototype.changeCanvas = function(e) {
      var address, el, p, protocol, text;

      if (e !== void 0) {
        el = $(e.target);
        p = el.text().split(" x ");
        this.width = this.orientation === "portrait" ? p[0] : p[1];
        this.height = this.orientation === "landscape" ? p[0] : p[1];
        localStorage.setItem("resp_tester_width", this.width);
        localStorage.setItem("resp_tester_height", this.height);
      }
      this.url = this.getUrl();
      this.inputUrl.val(this.url);
      if (this.url === "" || this.url === null) {
        this.iframe.src = "";
        return false;
      }
      protocol = this.url.match(/(http|https):\/\//);
      if (protocol !== null) {
        address = this.url;
      } else {
        address = "http://" + this.url;
      }
      this.iframe.attr("src", address);
      this.iframe.attr("width", this.width);
      this.iframe.attr("height", this.height);
      text = this.width + " x " + this.height;
      this.info.text(text);
      return $(window).scrollTop(0);
    };

    Tester.prototype.changeURL = function() {
      this.url = this.inputUrl.val();
      localStorage.setItem("resp_tester_url", this.url);
      return this.changeCanvas();
    };

    Tester.prototype.getUrl = function() {
      var u;

      u = localStorage.getItem("resp_tester_url");
      if (u !== "") {
        this.inputUrl.value = u;
      }
      return u;
    };

    Tester.prototype.orientationChange = function(e) {
      var h, orientation, w;

      orientation = e.target.value;
      if (this.orientation === orientation) {
        return false;
      }
      if (orientation === "landscape") {
        w = this.iframe.width();
        h = this.iframe.height();
        this.orientation = "landscape";
      } else if (orientation === "portrait") {
        h = this.iframe.height();
        w = this.iframe.width();
        this.orientation = "portrait";
      }
      localStorage.setItem("resp_tester_orient", this.orientation);
      this.width = h;
      this.height = w;
      localStorage.setItem("resp_tester_height", w);
      localStorage.setItem("resp_tester_width", h);
      return this.changeCanvas();
    };

    Tester.prototype.readUri = function() {
      var p, res, url;

      url = this.getUriParam("url");
      res = this.getUriParam("res");
      if (url !== "") {
        this.inputUrl.val(url);
        if (res !== "") {
          p = res.split("x");
          this.width = p[0];
          this.height = p[1];
        }
        return this.changeURL();
      }
    };

    Tester.prototype.getUriParam = function(param) {
      var regex, regexS, results;

      param = param.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
      regexS = "[\\?&]" + param + "=([^&#]*)";
      regex = new RegExp(regexS);
      results = regex.exec(window.location.search);
      if (results === null) {
        return "";
      } else {
        return decodeURIComponent(results[1].replace(/\+/g, " "));
      }
    };

    return Tester;

  })();

  test = new Tester;

  test.init();

}).call(this);
